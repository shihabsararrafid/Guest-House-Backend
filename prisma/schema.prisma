// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String  @id @default(cuid())
  role      Role    @default(value:USER)
  department String @default("")
  roll       String?
  phone      String?
  firstName          String?
  lastName           String?
  currentPosition    String?
  currentRole        String?
  address            String?
  thana              String?
  district           String?
  email              String  @unique
  username           String?  @unique
  password           String
  salt               String 
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastLoggedIn     DateTime?
  isEmailVerified    Boolean   @default(false)
  isActive           Boolean   @default(true)
  retryCount         Int       @default(0) 
  bookings           Booking[]
  transactions       PaymentTransaction[]
  issues             Issues[]


  @@index([email,username,id])
  
}
enum RoomType {
  SINGLE
  DOUBLE
  TWIN
  SUITE
  DELUXE
  PRESIDENTIAL
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
  CLEANING
}
enum BedType {
  SINGLE
  DOUBLE
  QUEEN
  KING
  TWIN
}

model Room {
  id          String      @id @default(cuid())
  roomNumber  String      @unique
  roomName    String?
  type        RoomType
  status      RoomStatus  @default(AVAILABLE)
  floor       Int? 
  capacity    Int         @default(2)
  pricePerNight Int
  description String?
  
  // Room features
  hasWifi         Boolean   @default(true)
  hasAC           Boolean   @default(true)
  hasTv           Boolean   @default(true)
  hasRefrigerator Boolean   @default(true)
  
  // Dimensions and view
  squareFootage   Float?
  viewType        String?   // city view, garden view, etc.
   // Bed relationship
  beds          Bed[]       // One room can have multiple beds
  // Maintenance and housekeeping
  lastCleaned     DateTime?
  lastMaintenance DateTime?

  
  
  // Booking related
  isAvailable     Boolean   @default(true)
  bookings        BookingRoom[]
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
issues         Issues[]
  @@index([roomNumber, type, status])
}

model Booking {
  id            String    @id @default(cuid())
  rooms         BookingRoom[]
  transaction   PaymentTransaction[]
  guest         User      @relation(fields: [guestId], references: [id])
  guestId       String
  checkIn       DateTime
  checkOut      DateTime
  totalPrice    Int
  totalPriceWithDiscount Int           
  discount      Int
  discountType  String
  // Booking status
  status        BookingStatus @default(PENDING)
  // Payment status
  isPaid        Boolean   @default(false)
  paymentDate   DateTime?
  paidAmount    Int      @default(0)
  bookedMoney   Int      @default(0)
  // Metadata
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  issues         Issues[]

  @@index([ guestId, checkIn, checkOut])
}
model BookingRoom {
  booking       Booking   @relation(fields: [bookingId], references: [id])
  bookingId     String
  room          Room      @relation(fields: [roomId], references: [id])
  roomId        String
  // Additional fields specific to the room booking can go here
  pricePerNight Int // Price when booked (may differ from room's current price)
  numberOfGuests Int?
  specialRequests String?
  createdAt     DateTime @default(now())

  @@id([bookingId, roomId])
  @@index([bookingId])
  @@index([roomId])
}
model Bed {
  id          String    @id @default(cuid())
  bedType     BedType
  quantity    Int       @default(1)
  capacity    Int       // how many people can sleep in this bed type
  
  // Relationship with Room
  room        Room      @relation(fields: [roomId], references: [id])
  roomId      String

  @@index([roomId])
}
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  ON_GOING
  COMPLETED
}

model PaymentTransaction {
  id            String      @id @default(uuid())
  amount        Int
  currency      String      @default("USD")
  status        PaymentStatus    @default(value:PENDING)
  type          PaymentType     @default(value:PAYMENT)// e.g., "PAYMENT", "REFUND", "CHARGEBACK"
  description   String?
  metadata      Json?     
  // Stripe specific fields
  stripePaymentIntentId String?        @unique
  stripeCustomerId      String?
  stripePaymentMethodId String?
  stripeFees            Int?           // in cents
  stripeReceiptUrl      String?
  last4                 String?        // last 4 digits of card
  paymentMethod         String?        // card, bank_transfer, wallet
  cardBrand             String?        // visa, mastercard, etc.
  
  // Error handling
  errorMessage          String?
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations (examples - uncomment and modify as needed)
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  booking          Booking        @relation(fields: [bookingId], references: [id])
  bookingId        String
  
  @@map("payment_transactions")
}



model Issues {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  booking    Booking? @relation(fields: [bookingId], references: [id])
  bookingId   String?
  room        Room?    @relation(fields: [roomId], references: [id])
  roomId      String?
  title       String
  description String
  status      IssueStatus   @default(OPEN) // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  priority    IssuePriority   @default(MEDIUM) // LOW, MEDIUM, HIGH
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isResolved  Boolean  @default(false)
  resolvedAt  DateTime?
  feedback    String? // Optional feedback from the user after resolution

  @@index([userId, status])
}
// Enums for better type safety
enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELED
}
enum PaymentType {
  PAYMENT
  REFUND
  CHARGEBACK
}
enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
}


enum Role {
  USER
  ADMIN
  RECEPTIONIST
  SUPERADMIN
}
